{"version":3,"file":"static/js/223.718678e0.chunk.js","mappings":"uSAEaA,EAAQC,EAAAA,GAAAA,QAAH,+FAEE,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACA,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGTC,EAAOJ,EAAAA,GAAAA,GAAH,kFAMJK,EAAOL,EAAAA,GAAAA,GAAH,gDAIJM,EAAQN,EAAAA,GAAAA,IAAH,yFAGG,SAAAC,GAAC,OAAIA,EAAEC,MAAMK,MAAMC,KAAlB,IAGTC,EAAOT,EAAAA,GAAAA,EAAH,mNAKF,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAEH,SAAAF,GAAC,OAAIA,EAAEC,MAAMQ,OAAOC,IAAnB,IACO,SAAAV,GAAC,OAAIA,EAAEC,MAAMK,MAAMC,KAAlB,G,8IC7BTT,EAAQC,EAAAA,GAAAA,QAAH,mDACG,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGTS,GAAYZ,EAAAA,EAAAA,IAAOa,EAAAA,GAAPb,CAAH,4DAKTc,GAAQd,EAAAA,EAAAA,IAAOe,EAAAA,GAAPf,CAAH,gEAEH,SAAAC,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAGHa,EAAShB,EAAAA,GAAAA,OAAH,+MAIE,SAAAC,GAAC,OAAIA,EAAEC,MAAMK,MAAMU,OAAlB,IACT,SAAAhB,GAAC,OAAIA,EAAEC,MAAMQ,OAAOQ,SAAnB,IACU,SAAAjB,GAAC,OAAIA,EAAEC,MAAMQ,OAAOS,SAAnB,I,SCSzB,EA1BkB,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAOhB,OACI,SAACrB,EAAD,WACI,SAAC,KAAD,CACIsB,cAAe,CAAEC,MAAO,IACxBC,SATS,SAACC,EAAD,GAA2B,IAAjBC,EAAgB,EAAhBA,UAC3BL,EAAUI,GACVC,GACH,EAIO,UAII,UAACb,EAAD,CAAWc,aAAa,MAAxB,WACI,SAACZ,EAAD,CACIa,KAAK,OACLC,KAAK,QACLC,YAAY,kCAEhB,SAACb,EAAD,CAAQW,KAAK,SAAb,UAAsB,SAAC,MAAD,CAAUG,KAAK,eAKxD,E,2BCHD,EArBkB,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACXC,GAAWC,EAAAA,EAAAA,MAEjB,OACI,SAAC,KAAD,UACKF,EAAOG,OAAS,IACb,SAAC,KAAD,UACKH,EAAOI,KAAI,gBAAEC,EAAF,EAAEA,GAAIC,EAAN,EAAMA,MAAOC,EAAb,EAAaA,cAAb,OACR,SAAC,KAAD,WACI,UAAC,KAAD,CAAMC,GAAE,UAAKH,GAAMI,MAAO,CAAEC,KAAMT,GAAlC,WACI,SAAC,KAAD,CAAOU,IAAKC,EAAAA,GAASL,EAAeM,IAAI,MACxC,SAAC,KAAD,UAAOP,QAHJD,EADH,OAY/B,ECOD,EAxBe,WAAO,IAAD,EACjB,GAAwBS,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0CC,EAAAA,EAAAA,MAA1C,eAAOC,EAAP,KAAsBC,EAAtB,KACMC,EAAK,UAAGF,EAAcG,IAAI,gBAArB,QAAiC,GAa5C,OAPAC,EAAAA,EAAAA,YAAU,WACDF,IAGLG,EAAAA,EAAAA,IAAaH,GAAOI,MAAK,SAAAC,GAAI,OAAIT,EAAQS,EAAZ,GAChC,GAAE,CAACL,KAGA,iCACI,SAAC,EAAD,CAAW/B,UAbC,SAAC,GAAa,IAAZE,EAAW,EAAXA,MAClB4B,EAA2B,KAAV5B,EAAe,CAAC6B,MAAO7B,GAAS,CAAC,EACrD,KAYO,SAAC,EAAD,CAAWS,OAAQe,MAG9B,C","sources":["components/TrendingMovies/TrendingMoviesStyled.jsx","components/SearchBar/SearchBarStyled.jsx","components/SearchBar/SearchBar.jsx","components/ListMovie/ListMovie.jsx","pages/Movies.jsx"],"sourcesContent":["import styled from \"styled-components\";\n\nexport const Wrapp = styled.section`\n    width: 100%;\n    padding-left: ${p => p.theme.space[4]}px;\n    padding-right: ${p => p.theme.space[4]}px;\n`;\n\nexport const List = styled.ul`\n    display: flex;\n    flex-wrap: wrap;\n    gap: 59px;\n`;\n\nexport const Item = styled.li`\n    position: relative\n`;\n\nexport const Image = styled.img`\n    display: block;\n    width: 350px;\n    border-radius: ${p => p.theme.radii.large};\n`;\n\nexport const Text = styled.p`\n    position: absolute;\n    left: 5px;\n    bottom: 5px;\n    margin: 0;\n    padding: ${p => p.theme.space[2]}px;\n    background-color: rgba(255, 255, 255, 0.5);\n    color: ${p => p.theme.colors.text};\n    border-radius: ${p => p.theme.radii.large};\n`;","import styled from \"styled-components\";\nimport { Form, Field } from \"formik\";\n\nexport const Wrapp = styled.section`\n    margin-bottom: ${p => p.theme.space[5]}px;\n`;\n\nexport const FieldForm = styled(Form)`\n    display: flex;\n    gap: 12px;\n`;\n\nexport const Input = styled(Field)`\n    width: 250px;\n    padding: ${p => p.theme.space[3]}px;\n`;\n\nexport const Button = styled.button`\n    display: flex;\n    width: 38px;\n    border: none;\n    border-radius: ${p => p.theme.radii.average};\n    color: ${p => p.theme.colors.baseWhite};\n    background-color: ${p => p.theme.colors.secondary};\n    justify-content: center;\n    align-items: center;\n`;","import { Formik } from \"formik\";\nimport { BiSearch } from \"react-icons/bi\";\nimport PropTypes from 'prop-types';\n\nimport { Wrapp, FieldForm, Input, Button } from \"./SearchBarStyled\";\n\nconst SearchBar = ({movieName}) => {\n\n    const handleSubmit = (value, { resetForm }) => {\n        movieName(value);\n        resetForm();\n    }\n\n    return (\n        <Wrapp>\n            <Formik\n                initialValues={{ movie: '' }}\n                onSubmit={handleSubmit}\n            >\n                <FieldForm autoComplete='off'>\n                    <Input\n                        type='text'\n                        name='movie'\n                        placeholder='Enter the title of the movie'\n                    />\n                    <Button type='submit'><BiSearch size='20'/></Button>\n                </FieldForm>\n            </Formik>\n        </Wrapp>\n    )\n}\n\nexport default SearchBar;\n\nSearchBar.propTypes = {\n    movieName: PropTypes.func.isRequired,\n}","import { poster } from \"services/Services\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport PropTypes from 'prop-types';\n\nimport { Wrapp, List, Item, Image, Text } from \"components/TrendingMovies/TrendingMoviesStyled\";\n\nconst ListMovie = ({ movies }) => {\n    const location = useLocation();\n\n    return (\n        <Wrapp>\n            {movies.length > 0 && (\n                <List>\n                    {movies.map(({id, title, backdrop_path}) => \n                        <Item key={id}>\n                            <Link to={`${id}`} state={{ from: location}}>\n                                <Image src={poster + backdrop_path} alt='' />\n                                <Text>{title}</Text>\n                            </Link>\n                        </Item>\n                    )}\n                </List>)\n            }\n        </Wrapp>\n    )\n}\n\nexport default ListMovie;\n\nListMovie.propTypes = {\n    movies: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.number.isRequired,\n            title: PropTypes.string.isRequired,\n            backdrop_path: PropTypes.string.isRequired,\n        })\n    )\n}","import { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\n\nimport SearchBar from \"components/SearchBar\";\nimport ListMovie from \"components/ListMovie\";\n\nimport { getFindMovie } from \"services/Services\";\n\nconst Movies = () => {\n    const [list, setList] = useState([]);\n    const [searchRequest, setSearchRequest] = useSearchParams();\n    const query = searchRequest.get('query') ?? '';\n\n    const hendleInput = ({movie}) => {\n        setSearchRequest(movie !== '' ? {query: movie} : {});\n    };\n\n    useEffect(() => {\n        if (!query) {\n            return;\n        }\n        getFindMovie(query).then(data => setList(data))\n    }, [query]);\n\n    return (\n        <>\n            <SearchBar movieName={hendleInput} />\n            <ListMovie movies={list}/>\n        </>\n    )\n}\n\nexport default Movies;"],"names":["Wrapp","styled","p","theme","space","List","Item","Image","radii","large","Text","colors","text","FieldForm","Form","Input","Field","Button","average","baseWhite","secondary","movieName","initialValues","movie","onSubmit","value","resetForm","autoComplete","type","name","placeholder","size","movies","location","useLocation","length","map","id","title","backdrop_path","to","state","from","src","poster","alt","useState","list","setList","useSearchParams","searchRequest","setSearchRequest","query","get","useEffect","getFindMovie","then","data"],"sourceRoot":""}